{"version":3,"sources":["initializeFlipperUtils.ts"],"names":["counter","getTime","date","Date","getHours","getMinutes","extractQueries","client","queryManager","Map","queries","getAllQueries","queryMap","allQueries","map","getQueryData","getMutationData","allMutations","Object","keys","key","mutation","variables","loading","error","id","name","body","loc","source","getAllMutations","mutationStore","final","getCurrentState","lastUpdateAt","mutations","cache","extract","initializeFlipperUtils","flipperConnection","apolloClient","acknowledged","enqueue","sendData","send","logger","receive","__actionHookForDevTools"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { DocumentNode } from '@apollo/client';\nimport { getOperationName } from '@apollo/client/utilities';\nimport type { Flipper } from 'react-native-flipper';\nimport { getQueries, getQueryData } from './flipperUtils';\nimport type {\n  ApolloClientState,\n  ApolloClientType,\n  ArrayOfMutations,\n  ArrayOfQuery,\n  MutationData,\n} from './typings';\n\nlet counter = 0;\n\nfunction getTime(): string {\n  const date = new Date();\n  return `${date.getHours()}:${date.getMinutes()}`;\n}\n\nfunction extractQueries(client: ApolloClientType): Map<any, any> {\n  // @ts-expect-error queryManager is private method\n  if (!client || !client.queryManager) {\n    return new Map();\n  }\n  // @ts-expect-error queryManager is private method\n  return client.queryManager.queries;\n}\n\nfunction getAllQueries(client: ApolloClientType): ArrayOfQuery {\n  // console.log(\"==========\")\n  // console.log(\"queries: \", client.queryManager.queries);\n  // console.log(\"==========\")\n\n  const queryMap = extractQueries(client);\n\n  const allQueries = getQueries(queryMap);\n\n  return allQueries?.map(getQueryData);\n}\n\ntype MutationObject = {\n  mutation: DocumentNode;\n  variables: object;\n  loading: boolean;\n  error: object;\n};\nfunction getMutationData(\n  allMutations: Record<string, MutationObject>\n): Array<MutationData> {\n  return [...Object.keys(allMutations)]?.map((key) => {\n    const { mutation, variables, loading, error } = allMutations[key];\n\n    // console.log({ key });\n    // console.log(JSON.stringify(allMutations[key]));\n    return {\n      id: key,\n      name: getOperationName(mutation),\n      variables,\n      loading,\n      error,\n      body: mutation?.loc?.source?.body,\n    };\n  });\n}\n\nfunction getAllMutations(client: ApolloClientType): ArrayOfMutations {\n  // @ts-expect-error private method\n  const allMutations = client.queryManager.mutationStore || {};\n\n  const final = getMutationData(allMutations);\n\n  return final;\n}\n\nfunction getCurrentState(client: ApolloClientType): ApolloClientState {\n  counter++;\n  return {\n    id: counter,\n    lastUpdateAt: getTime(),\n    queries: getAllQueries(client),\n    mutations: getAllMutations(client),\n    cache: client.cache.extract(true),\n  };\n}\n\nexport const initializeFlipperUtils = (\n  flipperConnection: Flipper.FlipperConnection,\n  apolloClient: ApolloClientType\n): void => {\n  let acknowledged = true;\n  let enqueue: null | ApolloClientState = getCurrentState(apolloClient);\n\n  function sendData() {\n    if (enqueue) {\n      flipperConnection.send('GQL:response', enqueue);\n      acknowledged = false;\n      enqueue = null;\n    }\n  }\n\n  const logger = (): void => {\n    enqueue = getCurrentState(apolloClient);\n    if (acknowledged) {\n      sendData();\n    }\n  };\n\n  flipperConnection.receive('GQL:ack', () => {\n    acknowledged = true;\n    sendData();\n  });\n\n  flipperConnection.receive('GQL:request', () => {\n    flipperConnection.send('GQL:response', getCurrentState(apolloClient));\n  });\n\n  flipperConnection.send('GQL:response', enqueue);\n\n  apolloClient.__actionHookForDevTools(logger);\n};\n"]}