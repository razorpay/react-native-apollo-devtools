{"version":3,"sources":["flipperUtils.ts"],"names":["getOperationName","print","done","getQueryData","query","key","document","name","id","queryString","variables","cachedData","getQueries","queryMap","queries","values","map","diff","source","loc","result"],"mappings":"AAAA;AAEA,SAASA,gBAAT,QAAiC,0BAAjC;AACA,SAASC,KAAT,QAAsB,SAAtB;AAGA,IAAIC,IAAI,GAAG,IAAX;AAEA,OAAO,SAASC,YAAT,CACLC,KADK,EAELC,GAFK,EAGkB;AACvB,MAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,QAArB,EAA+B,OADR,CAEvB;AACA;AACA;;AACA,QAAMC,IAAI,GAAGP,gBAAgB,CAACI,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEE,QAAR,CAA7B;;AACA,MAAIC,IAAI,KAAK,oBAAb,EAAmC;AACjC;AACD;;AAED,MAAIL,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAG,KAAP;AACA;AACD;;AAED,SAAO;AACLM,IAAAA,EAAE,EAAEH,GADC;AAELE,IAAAA,IAFK;AAGLE,IAAAA,WAAW,EAAER,KAAK,CAACG,KAAK,CAACE,QAAP,CAHb;AAILI,IAAAA,SAAS,EAAEN,KAAK,CAACM,SAJZ;AAKL;AACAC,IAAAA,UAAU,EAAEP,KAAK,CAACO;AANb,GAAP;AAQD;AAED,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA0D;AAC/D,MAAIC,OAAoB,GAAG,EAA3B;;AAEA,MAAID,QAAJ,EAAc;AACZ;AACAC,IAAAA,OAAO,GAAG,CAAC,GAAGD,QAAQ,CAACE,MAAT,EAAJ,EAAuBC,GAAvB,CAA2B;AAAA;;AAAA,UAAC;AAAEV,QAAAA,QAAF;AAAYI,QAAAA,SAAZ;AAAuBO,QAAAA;AAAvB,OAAD;AAAA,aAAoC;AACvEX,QAAAA,QADuE;AAEvEY,QAAAA,MAAM,EAAEZ,QAAF,aAAEA,QAAF,wCAAEA,QAAQ,CAAEa,GAAZ,kDAAE,cAAeD,MAFgD;AAGvER,QAAAA,SAHuE;AAIvEC,QAAAA,UAAU,EAAEM,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG;AAJqD,OAApC;AAAA,KAA3B,CAAV;AAMD;;AAED,SAAON,OAAP;AACD","sourcesContent":["/* eslint-disable consistent-return */\nimport type { QueryInfo } from '@apollo/client/core/QueryInfo';\nimport { getOperationName } from '@apollo/client/utilities';\nimport { print } from 'graphql';\nimport type { QueryData } from './typings';\n\nlet done = true;\n\nexport function getQueryData(\n  query: QueryInfo,\n  key: number\n): QueryData | undefined {\n  if (!query || !query.document) return;\n  // TODO: The current designs do not account for non-cached data.\n  // We need a workaround to show that data + we should surface\n  // the FetchPolicy.\n  const name = getOperationName(query?.document);\n  if (name === 'IntrospectionQuery') {\n    return;\n  }\n\n  if (done) {\n    done = false;\n    return;\n  }\n\n  return {\n    id: key,\n    name,\n    queryString: print(query.document),\n    variables: query.variables,\n    // @ts-expect-error\n    cachedData: query.cachedData,\n  };\n}\n\nexport function getQueries(queryMap: Map<any, any>): QueryInfo[] {\n  let queries: QueryInfo[] = [];\n\n  if (queryMap) {\n    // @ts-expect-error todo\n    queries = [...queryMap.values()].map(({ document, variables, diff }) => ({\n      document,\n      source: document?.loc?.source,\n      variables,\n      cachedData: diff?.result,\n    }));\n  }\n\n  return queries;\n}\n"]}